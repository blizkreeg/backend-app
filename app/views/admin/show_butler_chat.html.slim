- firebase_token = Firebase::FirebaseTokenGenerator.new("#{ENV['FIREBASE_SECRET']}").create_token({ uid: @profile.uuid })
.row
  .col-md-12
    .btn-group
      - if @profile.needs_butler_attention
        = button_to 'Mark as Resolved', admin_update_butler_chat_flag_path, { params: { profile_uuid: @profile.uuid, resolved: true }, class: 'submit btn btn-success'}
      - else
        = button_to 'Mark as Unresolved', admin_update_butler_chat_flag_path, { params: { profile_uuid: @profile.uuid, resolved: false }, class: 'submit btn btn-danger'}

      = button_to 'Send Notification', admin_send_butler_chat_notification_path, { params: { profile_uuid: @profile.uuid, myname: @profile.firstname }, class: 'submit btn btn-default'}

      / p If user is offline, don't send notification more than once

  .clearfix

  .col-md-12
    .panel.panel-white
      .panel-heading
        h4.panel-title
          = link_to @profile.fullname, admin_show_user_path(@profile.uuid)

      .panel-body
        .connectedness.text-right
        .conversation
          .messages
          .loading
            | Loading&hellip;
        .send-message
          = text_field_tag 'message_to_send', '', placeholder: 'Type message. Enter to send.', class: 'message-box'

javascript:
  var profile_uuid = "#{@profile.uuid}";

  var ref = new Firebase("#{Rails.application.config.firebase_db_url}");
  ref.authWithCustomToken("#{firebase_token}", function(error, authData) {
    if (error) {
      console.log("Login Failed!", error);
    } else {
      console.log("Login Succeeded!", authData);
    }
  });

  var conversationRef = new Firebase("#{Rails.application.config.firebase_db_url}butler-conversations/#{@profile.butler_conversation_uuid}/messages");

  var firstQuery = conversationRef.orderByChild("sent_at").limitToLast(25);

  firstQuery.on('child_added', function(snapshot) {
    $('.loading').hide();
    var data = snapshot.val();
    if(data.sender_uuid === undefined) {
      $('.messages').append('<div class="sent">' + data.content  + '</div>');
    } else {
      $('.messages').append('<div class="received">' + data.content  + '</div>');
    }

    $('.conversation').scrollTop($('.conversation')[0].scrollHeight);
  });

  $('#message_to_send').on('keypress', function(e) {
    if(e.which == 13) {
      conversationRef.push({ content: $(this).val(),
                              sender_uuid: null,
                              recipient_uuid: profile_uuid,
                              sent_at: Date.now(),
                              processed: true });
      $(this).val('');
    }
  });

  function checkIfDisconnected() {
    console.log(Date.now());
    var disconnectedRef = new Firebase("#{Rails.application.config.firebase_db_url}users/#{@profile.uuid}/disconnectedAt");

    disconnectedRef.once('value', function(data) {
      if(data.val() !== 'false') {
        $('.connectedness').html("<i style='color:#555;'>#{@profile.firstname}" + ' is offline</i>');
      } else {
        $('.connectedness').html("<span style='color:#555;'>#{@profile.firstname}" + ' is online!</span>');
      }
    });
  }

  checkIfDisconnected();

  setInterval(function() {
    checkIfDisconnected();
  }, 5000);

  setTimeout(function() {
    $('.loading').hide();
  }, 5000);

  //$('#disconnect-chat').on('click', function() {
  //  Firebase.goOffline();
  //});
