{
  "swagger": "2.0",
  "info": {
    "title": "Mobile API",
    "description": "All API requests must have the `Content-Type` and `Accept` HTTP headers set to `application/json`.",
    "version": "1.0.0"
  },
  "host": "ekcoffee2-3000.terminal.com",
  "schemes": [
    "https"
  ],
  "basePath": "/v1",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Profiles",
      "description": "User profile"
    },
    {
      "name": "Photos",
      "description": "Profile photos"
    },
    {
      "name": "Matches",
      "description": "Profile matches"
    },
    {
      "name": "Conversations",
      "description": "User conversations"
    },
    {
      "name": "Messages",
      "description": "Conversation messages"
    },
    {
      "name": "Accounts",
      "description": "Account settings"
    }
  ],
  "paths": {
    "/profiles": {
      "post": {
        "tags": [
          "Profiles"
        ],
        "summary": "Create Profile/New User Signup",
        "description": "The parameters required to create a new profile should include the full Facebook OAuth response object.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Parameters for profile to be created",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "facebook_auth_hash",
                    "intent",
                    "longitude",
                    "latitude"
                  ],
                  "properties": {
                    "facebook_auth_hash": {
                      "description": "full response object from auth provider",
                      "type": "object"
                    },
                    "intent": {
                      "description": "dating intention",
                      "type": "string",
                      "enum": [
                        "Dating",
                        "Relationship"
                      ]
                    },
                    "latitude": {
                      "description": "latitude as on profile",
                      "type": "number",
                      "format": "double"
                    },
                    "longitude": {
                      "description": "longitude as on profile",
                      "type": "number",
                      "format": "double"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Profile created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Profile"
                },
                "auth": {
                  "$ref": "#/definitions/AuthToken"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed. Bad data.",
            "schema": {
              "$ref": "#/definitions/400"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/500"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Profiles"
        ],
        "summary": "Get featured people in a city",
        "parameters": [
          {
            "name": "latitude",
            "in": "query",
            "description": "latitude of the requesting user",
            "type": "number",
            "format": "double",
            "required": true,
            "allowEmptyValue": false
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "longitude of the requesting user",
            "type": "number",
            "format": "double",
            "required": true,
            "allowEmptyValue": false
          },
          {
            "name": "show",
            "in": "query",
            "description": "parameter to filter profiles",
            "type": "string",
            "required": true,
            "allowEmptyValue": false,
            "enum": [
              "featured"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Featured people",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/FeaturedProfile"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No profiles found",
            "schema": {
              "$ref": "#/definitions/403"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/500"
            }
          }
        }
      }
    },
    "/profiles/:uuid": {
      "delete": {
        "tags": [
          "Profiles"
        ],
        "summary": "Delete Profile/User Account",
        "description": "This is effectively a 'delete account' method. The app should log the user out upon successful response.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "delete reason",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "reason": {
                      "description": "reason to delete their profile",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted profile/account"
          },
          "401": {
            "description": "Not authenticated",
            "schema": {
              "$ref": "#/definitions/401"
            }
          },
          "403": {
            "description": "Forbidden. User unauthorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/403"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/404"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/500"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Profiles"
        ],
        "summary": "Get profile details for a user",
        "responses": {
          "200": {
            "description": "Profile details",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Profile"
                },
                "auth": {
                  "$ref": "#/definitions/AuthToken"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "schema": {
              "$ref": "#/definitions/401"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/404"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/500"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Profiles"
        ],
        "summary": "Update Profile",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "properties to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated profile",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Profile"
                },
                "auth": {
                  "$ref": "#/definitions/AuthToken"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "schema": {
              "$ref": "#/definitions/401"
            }
          },
          "403": {
            "description": "Forbidden. User unauthorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/403"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/404"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/500"
            }
          }
        }
      }
    },
    "/sign-in": {
      "post": {
        "tags": [
          "Profiles"
        ],
        "summary": "Login an existing user",
        "description": "Login existing user with their FB credentials",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "full auth hash from FB login response",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "facebook_auth_hash"
                  ],
                  "properties": {
                    "facebook_auth_hash": {
                      "description": "full omniauth hash from facebook",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sign in successful",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Profile"
                },
                "auth": {
                  "$ref": "#/definitions/AuthToken"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/404"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/500"
            }
          }
        }
      }
    },
    "/waiting-list": {
      "post": {
        "tags": [
          "Profiles"
        ],
        "summary": "Adds the user to the launch waiting list",
        "description": "In cities where ekcoffee hasn't launched, this builds a waiting list",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "latitude",
                    "longitude",
                    "phone"
                  ],
                  "properties": {
                    "latitude": {
                      "description": "user's latitude",
                      "type": "number",
                      "format": "double"
                    },
                    "longitude": {
                      "description": "user's longitude",
                      "type": "number",
                      "format": "double"
                    },
                    "phone": {
                      "description": "user's mobile number",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully added to waiting list"
          },
          "400": {
            "description": "Bad data",
            "schema": {
              "$ref": "#/definitions/404"
            }
          }
        }
      }
    },
    "/profiles/:profile_uuid/photos": {
      "post": {
        "tags": [
          "Photos"
        ],
        "summary": "Add new photo to profile",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "parameters to add new photo",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "facebook_id": {
                      "type": "string",
                      "description": "facebook photo id"
                    },
                    "primary": {
                      "type": "boolean",
                      "description": "is this a primary photo?"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Photo created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "all photos",
                  "items": {
                    "$ref": "#/definitions/Photo"
                  }
                },
                "auth": {
                  "$ref": "#/definitions/AuthToken"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "schema": {
              "$ref": "#/definitions/401"
            }
          },
          "403": {
            "description": "Forbidden. User unauthorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/403"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/500"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Photos"
        ],
        "summary": "Get all profile photos",
        "responses": {
          "401": {
            "description": "Not authenticated",
            "schema": {
              "$ref": "#/definitions/401"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/500"
            }
          }
        }
      }
    },
    "/profiles/:profile_uuid/photos/:id": {
      "delete": {
        "tags": [
          "Photos"
        ],
        "summary": "Delete photo",
        "responses": {
          "401": {
            "description": "Not authenticated",
            "schema": {
              "$ref": "#/definitions/401"
            }
          },
          "403": {
            "description": "Forbidden. User unauthorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/403"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/500"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Photos"
        ],
        "summary": "Get a specific photo",
        "responses": {
          "401": {
            "description": "Not authenticated",
            "schema": {
              "$ref": "#/definitions/401"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/500"
            }
          }
        }
      }
    },
    "/profiles/:profile_uuid/matches": {
      "get": {
        "tags": [
          "Matches"
        ],
        "summary": "Get matches for profile",
        "responses": {
          "200": {
            "description": "List of matches",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "match_info": {
                        "$ref": "#/definitions/Match"
                      },
                      "matched_profile": {
                        "$ref": "#/definitions/Profile"
                      }
                    }
                  }
                },
                "auth": {
                  "$ref": "#/definitions/AuthToken"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "schema": {
              "$ref": "#/definitions/401"
            }
          },
          "403": {
            "description": "Forbidden. User unauthorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/403"
            }
          },
          "404": {
            "description": "No matches found",
            "schema": {
              "$ref": "#/definitions/403"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/500"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Matches"
        ],
        "summary": "Bulk update a list of matches",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "match properties",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Match"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All matches updated",
            "schema": {
              "type": "object",
              "properties": {
                "auth": {
                  "$ref": "#/definitions/AuthToken"
                }
              }
            }
          },
          "400": {
            "description": "One or more match updates failed",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "match_id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "error",
                          "success"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                },
                "auth": {
                  "$ref": "#/definitions/AuthToken"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "schema": {
              "$ref": "#/definitions/401"
            }
          },
          "403": {
            "description": "Forbidden. User unauthorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/403"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/500"
            }
          }
        }
      }
    },
    "/profiles/:profile_uuid/matches/:id": {
      "patch": {
        "tags": [
          "Matches"
        ],
        "summary": "Update a specific match",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "match properties",
            "schema": {
              "$ref": "#/definitions/Match"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Match updated",
            "schema": {
              "type": "object",
              "properties": {
                "auth": {
                  "$ref": "#/definitions/AuthToken"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "schema": {
              "$ref": "#/definitions/401"
            }
          },
          "403": {
            "description": "Forbidden. User unauthorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/403"
            }
          },
          "404": {
            "description": "Match not found",
            "schema": {
              "$ref": "#/definitions/403"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/500"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Profile": {
      "type": "object",
      "description": "Profile object. The properties `uuid` are read-only.",
      "properties": {
        "uuid": {
          "description": "profile uuid",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "email": {
          "description": "email address",
          "type": "string",
          "format": "email",
          "readOnly": true
        },
        "firstname": {
          "description": "first name",
          "type": "string",
          "readOnly": true
        },
        "lastname": {
          "description": "last name",
          "type": "string",
          "readOnly": true
        },
        "age": {
          "description": "age",
          "type": "integer",
          "readOnly": true,
          "format": "int32",
          "minimum": 21,
          "maximum": 99
        },
        "gender": {
          "description": "gender",
          "type": "string",
          "readOnly": true,
          "enum": [
            "Male",
            "Female"
          ]
        },
        "height": {
          "description": "height",
          "type": "string",
          "enum": [
            "4'0\"",
            "4'1\"",
            "4'2\"",
            "4'3\"",
            "4'4\"",
            "4'5\"",
            "4'6\"",
            "4'7\"",
            "4'8\"",
            "4'9\"",
            "4'10\"",
            "4'11\"",
            "5'",
            "5'1\"",
            "5'2\"",
            "5'3\"",
            "5'4\"",
            "5'5\"",
            "5'6\"",
            "5'7\"",
            "5'8\"",
            "5'9\"",
            "5'10\"",
            "5'11\"",
            "6'",
            "6'1\"",
            "6'2\"",
            "6'3\"",
            "6'4\"",
            "6'5\"",
            "6'6\"",
            "6'7\"",
            "6'8\"",
            "6'9\""
          ]
        },
        "profession": {
          "description": "occupation",
          "type": "string",
          "maximum": 50
        },
        "highest_degree": {
          "description": "highest degree",
          "type": "string",
          "enum": [
            "Bachelors",
            "Masters",
            "Doctorate"
          ]
        },
        "faith": {
          "description": "faith/religion/belief",
          "type": "string",
          "enum": [
            "Agnostic",
            "Atheist",
            "Baha'i",
            "Buddhist",
            "Jain",
            "Hindu",
            "Muslim",
            "Parsi/Zoroastrian",
            "Sikh",
            "Spiritual"
          ]
        },
        "last_known_latitude": {
          "description": "current/last known latitude",
          "type": "number",
          "format": "double"
        },
        "last_known_longitude": {
          "description": "current/last known longitude",
          "type": "number",
          "format": "double"
        },
        "photos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Photo"
          }
        }
      }
    },
    "FeaturedProfile": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name"
        },
        "age": {
          "type": "integer",
          "description": "age"
        },
        "profession": {
          "type": "string",
          "description": "profession"
        },
        "city_name": {
          "type": "string",
          "description": "city name"
        }
      }
    },
    "Photo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "url": {
          "type": "string"
        },
        "width": {
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "primary": {
          "type": "boolean",
          "enum": [
            false,
            true
          ]
        },
        "sizes": {
          "type": "object",
          "properties": {
            "100x100": {
              "type": "string"
            }
          }
        }
      }
    },
    "Match": {
      "type": "object",
      "description": "Match info",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "for_profile_uuid": {
          "type": "string",
          "description": "profile who this is a match for",
          "format": "uuid",
          "readOnly": true
        },
        "matched_profile_uuid": {
          "type": "string",
          "description": "the matched profile",
          "format": "uuid",
          "readOnly": true
        },
        "created_at": {
          "type": "string",
          "description": "match created date+time (iso8601)",
          "format": "date-time",
          "readOnly": true
        },
        "decision": {
          "type": "string",
          "description": "decision taken",
          "enum": [
            "Pass",
            "Like"
          ]
        }
      }
    },
    "AuthToken": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "auth token (json web token)"
        },
        "expires_at": {
          "type": "string",
          "description": "auth token expiration DateTime in iso8601 format",
          "format": "date-time"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "error string"
        },
        "http_status": {
          "type": "integer",
          "description": "HTTP status code",
          "format": "int32"
        },
        "code": {
          "type": "string",
          "description": "error code"
        }
      }
    },
    "400": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        },
        "auth": {
          "$ref": "#/definitions/AuthToken"
        }
      }
    },
    "401": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        },
        "auth": {
          "description": "value will be null",
          "$ref": "#/definitions/AuthToken"
        }
      }
    },
    "403": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        },
        "auth": {
          "$ref": "#/definitions/AuthToken"
        }
      }
    },
    "404": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        },
        "auth": {
          "$ref": "#/definitions/AuthToken"
        }
      }
    },
    "500": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        },
        "auth": {
          "$ref": "#/definitions/AuthToken"
        }
      }
    }
  }
}
